#ifndef TERM_H
#define TERM_H

#include <vector>
#include <string>


	// The following are "incomplete class declarations", that is, 
	// just names of classes defined elsewhere in the program,
	// but mentioned in this file.
class OpFactory;
class LeafFactory;

/*
Term is the mother class of the symbolic regression class hierarchy.
Term is an abstract class, since it has several pure virtual methods.
Immediate (known) subclasses of Term are Constant, Variable, and BinaryOp.
*/
class Term {
public:
		// The default constructor. It can do nothing except set the
		// member variable depth to zero.
	Term() {depth = 0;}

		// This destructor must be virtual so that subtrees
		// are recursively destroyed (by destructors in subclasses).
	virtual ~Term() {}		

		// Returns a pointer to a duplicate of the entire
		// subtree rooted at this Term. All the Terms in the 
		// duplicate subtree are reproduced exactly.
	virtual Term * duplicate() = 0;		

		// Returns a string holding the (text) algebraic 
		// representation  of the subtree rooted at this Term. 
	virtual std::string symbolicEval() = 0;	

		// Returns the numeric value of the subtree rooted at this term,
		// given the values of the independent variables in the vector data.
	virtual double numericalEval(std::vector<double> data) = 0;

		// Returns a pointer to a clone of this Term.
		// Note: a clone is generated by a call to the *default* constructor.
		// This means that clone() only produces a generic object.
	virtual Term * clone() = 0;

		// Sets the Term *t as a child of this Term. For example,
		// if position = 2, the 2nd child of this Term is set as *t.
	virtual void setChild(Term * t, int position) = 0;

		// Used to add a randomly drawn children to the current Term.
		// If the current Term's depth = maxDepth, only leaf terms may be added;
		// otherwise, an operator or leaf is randomly drawn.
	virtual void addRandomKids(OpFactory & of, LeafFactory & lf, int maxDepth) = 0;

		// This Term's current depth in the tree it belongs to.
		// Traditionally, the depth of a root node is zero.
	int depth;

		// The size (count of nodes) of the tree rooted at this Term.
		// The current Term is part of the count.
	virtual int mySize() {return 1;}


};

#endif